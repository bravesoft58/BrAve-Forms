# .claude/database-patterns.md
# Database Design Patterns for BrAve Forms

## Core Schema Architecture

### Multi-Tenant Tables with Clerk Integration
```sql
-- Organizations linked to Clerk
CREATE TABLE organizations (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    clerk_org_id VARCHAR(255) UNIQUE NOT NULL,
    name VARCHAR(255) NOT NULL,
    tier VARCHAR(20) DEFAULT 'standard',
    compliance_level VARCHAR(20) DEFAULT 'basic',
    settings JSONB DEFAULT '{}',
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Projects with weather station assignment
CREATE TABLE projects (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    organization_id UUID REFERENCES organizations(id),
    clerk_org_id VARCHAR(255) NOT NULL,
    name VARCHAR(255) NOT NULL,
    project_number VARCHAR(100),
    location POINT, -- GPS coordinates
    weather_station_id VARCHAR(100),
    compliance_level VARCHAR(20),
    status VARCHAR(20) DEFAULT 'active',
    metadata JSONB DEFAULT '{}',
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Dynamic forms with JSONB storage
CREATE TABLE compliance_forms (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    organization_id UUID NOT NULL,
    clerk_org_id VARCHAR(255) NOT NULL,
    name VARCHAR(255) NOT NULL,
    form_type VARCHAR(50), -- 'swppp', 'safety', 'dust_control'
    version INTEGER DEFAULT 1,
    
    -- JSONB for flexible schema
    template_data JSONB NOT NULL,
    validation_rules JSONB,
    conditional_logic JSONB,
    
    -- Frequently queried structured fields
    created_by_clerk_user VARCHAR(255),
    status VARCHAR(20) DEFAULT 'draft',
    created_at TIMESTAMPTZ DEFAULT NOW(),
    
    -- Performance indexes
    CONSTRAINT valid_status CHECK (status IN ('draft', 'published', 'archived'))
);

-- Form submissions with hybrid approach
CREATE TABLE form_submissions (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    form_id UUID REFERENCES compliance_forms(id),
    organization_id UUID NOT NULL,
    project_id UUID REFERENCES projects(id),
    clerk_org_id VARCHAR(255) NOT NULL,
    submitted_by_clerk_user VARCHAR(255) NOT NULL,
    
    -- Extracted frequently-queried fields
    submitted_at TIMESTAMPTZ DEFAULT NOW(),
    submission_date DATE, -- For weather correlation
    status VARCHAR(50) DEFAULT 'pending',
    compliance_status VARCHAR(50),
    
    -- Dynamic form data
    response_data JSONB NOT NULL,
    metadata JSONB DEFAULT '{}',
    
    -- Weather context for compliance
    weather_conditions JSONB,
    rainfall_trigger_id UUID
);
```

## Performance Optimization Patterns

### JSONB Indexing Strategy
```sql
-- GIN indexes for containment queries (3x faster reads)
CREATE INDEX idx_submissions_responses 
ON form_submissions USING gin(response_data jsonb_path_ops);

-- Expression indexes for frequently accessed nested fields
CREATE INDEX idx_completion_status 
ON form_submissions ((response_data->>'completion_percentage')::numeric);

-- Partial indexes for filtered queries
CREATE INDEX idx_pending_submissions 
ON form_submissions(submitted_at)
WHERE status = 'pending';

-- Composite indexes for complex queries
CREATE INDEX idx_org_project_compliance 
ON form_submissions 
USING btree(clerk_org_id, project_id, compliance_status, submitted_at DESC);
```

### Partitioning for Scale
```sql
-- Time-based partitioning for compliance data
CREATE TABLE form_submissions (
    -- columns as above
    submitted_at TIMESTAMPTZ DEFAULT NOW()
) PARTITION BY RANGE (submitted_at);

-- Monthly partitions
CREATE TABLE form_submissions_2024_01 PARTITION OF form_submissions
FOR VALUES FROM ('2024-01-01') TO ('2024-02-01');

-- Automated partition management
SELECT partman.create_parent(
    p_parent_table => 'public.form_submissions',
    p_control => 'submitted_at',
    p_type => 'range',
    p_interval => 'monthly'
);
```

## Row-Level Security for Multi-Tenancy

```sql
-- Enable RLS on all tenant tables
ALTER TABLE compliance_forms ENABLE ROW LEVEL SECURITY;
ALTER TABLE form_submissions ENABLE ROW LEVEL SECURITY;
ALTER TABLE projects ENABLE ROW LEVEL SECURITY;

-- Tenant context function
CREATE OR REPLACE FUNCTION current_tenant_id() RETURNS UUID AS $$
    SELECT current_setting('app.current_tenant_id', TRUE)::UUID;
$$ LANGUAGE sql SECURITY DEFINER;

-- RLS policies with role-based access
CREATE POLICY tenant_forms_policy ON compliance_forms
    USING (organization_id = current_tenant_id());

CREATE POLICY form_submissions_policy ON form_submissions
FOR ALL TO app_user
USING (
    organization_id = current_tenant_id() 
    AND (
        current_setting('app.current_user_role') IN ('admin', 'project_manager')
        OR (
            current_setting('app.current_user_role') = 'foreman' 
            AND submitted_by_clerk_user = current_setting('app.current_user_clerk_id')
        )
        OR (
            current_setting('app.current_user_role') = 'inspector' 
            AND status = 'submitted'
        )
    )
);
```

## Offline Sync Patterns

### Local SQLite Schema
```sql
-- Mirror structure for offline storage
CREATE TABLE local_form_submissions (
    id TEXT PRIMARY KEY,
    form_id TEXT,
    project_id TEXT,
    response_data TEXT, -- JSON string
    sync_status TEXT DEFAULT 'pending', -- 'pending', 'synced', 'conflict'
    last_modified INTEGER, -- Unix timestamp
    created_at INTEGER
);

-- Sync queue management
CREATE TABLE sync_queue (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    operation TEXT, -- 'create', 'update', 'delete'
    table_name TEXT,
    record_id TEXT,
    data TEXT, -- JSON payload
    retry_count INTEGER DEFAULT 0,
    created_at INTEGER
);
```

## Weather and Compliance Tables

```sql
-- Weather monitoring for compliance triggers
CREATE TABLE weather_events (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    project_id UUID REFERENCES projects(id),
    event_timestamp TIMESTAMPTZ,
    precipitation_24hr NUMERIC(5,2), -- inches
    temperature NUMERIC(4,1), -- fahrenheit
    wind_speed NUMERIC(4,1), -- mph
    data_source VARCHAR(50), -- 'NOAA', 'OpenWeatherMap'
    
    -- Compliance flags
    rain_trigger_activated BOOLEAN DEFAULT FALSE,
    inspection_required_by TIMESTAMPTZ,
    wind_alert_level VARCHAR(20), -- 'normal', 'caution', 'danger'
    
    CONSTRAINT valid_precipitation CHECK (precipitation_24hr >= 0),
    CONSTRAINT valid_wind_speed CHECK (wind_speed >= 0)
);

-- SWPPP inspection compliance
CREATE TABLE swppp_inspections (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    project_id UUID REFERENCES projects(id),
    weather_event_id UUID REFERENCES weather_events(id),
    
    -- Inspector details
    inspector_clerk_user VARCHAR(255) NOT NULL,
    inspector_certification VARCHAR(100),
    inspection_date DATE NOT NULL,
    inspection_type VARCHAR(50), -- 'routine', 'rain_triggered'
    
    -- BMP assessment
    bmp_assessments JSONB NOT NULL,
    corrective_actions JSONB DEFAULT '[]',
    
    -- Digital signatures
    inspector_signature TEXT,
    certification_statement TEXT,
    signature_timestamp TIMESTAMPTZ,
    
    -- Compliance status
    compliance_status VARCHAR(50) DEFAULT 'compliant',
    violations JSONB DEFAULT '[]',
    
    CONSTRAINT valid_inspection_type CHECK (
        inspection_type IN ('routine', 'rain_triggered', 'quarterly')
    )
);
```

## Photo Management Schema

```sql
-- Photo storage with metadata
CREATE TABLE construction_photos (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    organization_id UUID NOT NULL,
    project_id UUID REFERENCES projects(id),
    submission_id UUID REFERENCES form_submissions(id),
    
    -- Storage URLs
    original_url VARCHAR(500),
    thumbnail_url VARCHAR(500),
    compressed_url VARCHAR(500),
    
    -- Technical metadata
    file_size INTEGER,
    dimensions JSONB, -- {width, height}
    format VARCHAR(10), -- 'JPEG', 'PNG', 'WebP'
    
    -- Location and context metadata
    gps_coordinates POINT,
    captured_at TIMESTAMPTZ,
    device_info JSONB,
    
    -- Business metadata
    tags TEXT[],
    category VARCHAR(50), -- 'progress', 'safety', 'compliance', 'violation'
    description TEXT,
    
    -- Processing status
    processing_status VARCHAR(20) DEFAULT 'uploaded',
    cdn_status VARCHAR(20) DEFAULT 'pending',
    
    created_at TIMESTAMPTZ DEFAULT NOW(),
    
    CONSTRAINT valid_format CHECK (format IN ('JPEG', 'PNG', 'WebP', 'HEIC'))
);

-- Photo processing queue
CREATE TABLE photo_processing_queue (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    photo_id UUID REFERENCES construction_photos(id),
    operation VARCHAR(50), -- 'compress', 'thumbnail', 'cdn_upload'
    status VARCHAR(20) DEFAULT 'pending',
    retry_count INTEGER DEFAULT 0,
    error_message TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    processed_at TIMESTAMPTZ
);
```

## Query Patterns and Examples

### Common Queries with Performance Optimization
```sql
-- Get pending compliance items for organization
SELECT p.name AS project_name,
       fs.submitted_at,
       fs.response_data->>'inspection_type' AS inspection_type,
       fs.compliance_status
FROM form_submissions fs
JOIN projects p ON fs.project_id = p.id
WHERE fs.clerk_org_id = $1 
AND fs.compliance_status = 'pending'
ORDER BY fs.submitted_at ASC;

-- Weather-triggered inspections due
SELECT p.name,
       we.precipitation_24hr,
       we.inspection_required_by,
       EXTRACT(EPOCH FROM (we.inspection_required_by - NOW())) / 3600 AS hours_remaining
FROM weather_events we
JOIN projects p ON we.project_id = p.id
WHERE we.rain_trigger_activated = true
AND we.inspection_required_by > NOW()
AND p.organization_id = current_tenant_id();

-- Photo search with metadata
SELECT cp.*,
       p.name AS project_name
FROM construction_photos cp
JOIN projects p ON cp.project_id = p.id
WHERE cp.organization_id = current_tenant_id()
AND cp.tags && ARRAY[$1] -- Tag intersection
AND cp.captured_at BETWEEN $2 AND $3
ORDER BY cp.captured_at DESC;
```

## Data Migration and Versioning

### Form Schema Evolution
```sql
-- Track form template versions
CREATE TABLE form_schema_versions (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    form_id UUID REFERENCES compliance_forms(id),
    version INTEGER NOT NULL,
    schema_diff JSONB, -- Changes from previous version
    migration_script JSONB, -- Data transformation rules
    created_by_clerk_user VARCHAR(255),
    created_at TIMESTAMPTZ DEFAULT NOW(),
    
    UNIQUE(form_id, version)
);

-- Handle backwards compatibility
CREATE OR REPLACE FUNCTION migrate_submission_data(
    submission_data JSONB,
    from_version INTEGER,
    to_version INTEGER
) RETURNS JSONB AS $$
-- Implementation for data transformation between schema versions
$$ LANGUAGE plpgsql;
```

## Backup and Recovery Patterns

### Continuous Backup Strategy
```bash
# WAL archiving configuration
wal_level = replica
archive_mode = on
archive_command = 'aws s3 cp %p s3://braveforms-backup/wal/%f'
archive_timeout = 3600

# Point-in-time recovery setup
restore_command = 'aws s3 cp s3://braveforms-backup/wal/%f %p'
recovery_target_time = '2024-01-15 10:30:00'
```

### Data Retention Automation
```sql
-- Automated archival for compliance
CREATE OR REPLACE FUNCTION archive_old_submissions() RETURNS void AS $$
BEGIN
    -- Move submissions older than 7 years to archive
    INSERT INTO archived_submissions 
    SELECT * FROM form_submissions 
    WHERE submitted_at < NOW() - INTERVAL '7 years';
    
    DELETE FROM form_submissions 
    WHERE submitted_at < NOW() - INTERVAL '7 years';
    
    -- Log archival activity
    INSERT INTO audit_logs (action, details) 
    VALUES ('archive_submissions', json_build_object(
        'archived_count', row_count,
        'archived_before', NOW() - INTERVAL '7 years'
    ));
END;
$$ LANGUAGE plpgsql;

-- Schedule monthly archival
SELECT cron.schedule('archive-old-data', '0 2 1 * *', 'SELECT archive_old_submissions();');
```

## Connection and Performance Tuning

### PgBouncer Configuration
```ini
# Connection pooling for high concurrency
[databases]
braveforms = host=localhost dbname=braveforms

[pgbouncer]
pool_mode = transaction
default_pool_size = 20
max_client_conn = 4000
server_round_robin = 1
ignore_startup_parameters = extra_float_digits
```

### Key Performance Settings
```sql
-- PostgreSQL tuning for JSONB workloads
shared_buffers = '4GB'
effective_cache_size = '12GB'
work_mem = '256MB'
maintenance_work_mem = '1GB'

-- JSONB-specific optimizations
gin_pending_list_limit = '4MB'
```

## Common Patterns to Follow

### Always Use Row-Level Security
- Enable RLS on every table with tenant data
- Include organization_id in all policies
- Use current_tenant_id() function consistently

### Optimize JSONB Usage
- Extract frequently-queried fields to structured columns
- Use GIN indexes for containment queries
- Use expression indexes for computed values
- Keep JSONB documents under 1MB for performance

### Handle Time Zones Properly
- Always use TIMESTAMPTZ (not TIMESTAMP)
- Store all times in UTC
- Convert to local time in application layer

### Implement Proper Constraints
- Use CHECK constraints for business rules
- Add foreign key constraints for referential integrity
- Include NOT NULL where appropriate
- Validate JSONB structure with CHECK constraints when possible

Remember: Query performance degrades significantly above 100M rows without partitioning. Plan partition strategy early for time-series data like form submissions and weather events.