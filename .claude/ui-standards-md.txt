# .claude/ui-standards.md
# UI/UX Design Standards for BrAve Forms

## Design Principles (NON-NEGOTIABLE)

### Field-First Design Requirements
- **Touch targets**: Minimum 48x48dp (glove-friendly)
- **Spacing**: Minimum 8dp between interactive elements
- **Contrast**: 7:1 ratio minimum for outdoor visibility
- **One-thumb operation**: Critical actions within thumb reach zone
- **High contrast mode**: Available for bright sunlight conditions

### Mantine v7 Configuration
```javascript
const theme = createTheme({
  primaryColor: 'blue',
  colors: {
    blue: ['#E3F2FD', '#BBDEFB', '#90CAF9', '#64B5F6', 
           '#42A5F5', '#2196F3', '#1E88E5', '#1976D2', 
           '#1565C0', '#0D47A1'],
  },
  fontFamily: '-apple-system, BlinkMacSystemFont, Segoe UI, Roboto',
  defaultRadius: 'md',
  components: {
    Button: {
      defaultProps: { size: 'md' },
      styles: { root: { minHeight: 48 } }
    },
    TextInput: {
      defaultProps: { size: 'md' },
      styles: { input: { minHeight: 48, fontSize: 16 } }
    }
  }
});
```

## Color System

### Primary Colors
```css
--primary-blue: #0066CC;      /* Primary actions */
--primary-dark: #004499;      /* Active states */
--primary-light: #3399FF;     /* Hover states */
```

### Status Colors
```css
--success-green: #28A745;     /* Completed, compliant */
--warning-yellow: #FFC107;    /* Attention needed */
--danger-red: #DC3545;        /* Violations, errors */
--info-blue: #17A2B8;         /* Information */
```

### Neutral Colors
```css
--neutral-900: #212529;       /* Primary text */
--neutral-700: #495057;       /* Secondary text */
--neutral-500: #6C757D;       /* Disabled text */
--neutral-300: #DEE2E6;       /* Borders */
--neutral-100: #F8F9FA;       /* Backgrounds */
--white: #FFFFFF;             /* Cards, inputs */
```

## Component Standards

### Button Components
```css
.btn-primary {
  min-height: 48px;
  min-width: 48px;
  padding: 12px 24px;
  background: var(--primary-blue);
  color: white;
  border-radius: 8px;
  font-weight: 600;
  touch-action: manipulation;
}

/* Button variants */
.btn-secondary { background: var(--neutral-300); color: var(--neutral-900); }
.btn-danger { background: var(--danger-red); color: white; }
.btn-success { background: var(--success-green); color: white; }
```

### Form Input Standards
```css
.input-field {
  min-height: 48px;
  padding: 12px 16px;
  border: 2px solid var(--neutral-300);
  border-radius: 8px;
  font-size: 16px; /* Prevents iOS zoom */
}

.input-field:focus {
  border-color: var(--primary-blue);
  outline: none;
  box-shadow: 0 0 0 3px rgba(0, 102, 204, 0.1);
}

.input-field.error {
  border-color: var(--danger-red);
}
```

### Card Components
```css
.card {
  background: white;
  border-radius: 12px;
  padding: var(--space-4);
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  margin-bottom: var(--space-4);
}

.card-header {
  font-size: 1.125rem;
  font-weight: 600;
  margin-bottom: 12px;
}
```

## Mobile Navigation Patterns

### Bottom Navigation (Primary)
```javascript
const BottomNav = () => (
  <nav className="bottom-nav" role="navigation">
    <NavItem icon="home" label="Dashboard" to="/dashboard" />
    <NavItem icon="folder" label="Projects" to="/projects" />
    <NavItem icon="plus-circle" label="New" to="/create" primary />
    <NavItem icon="clipboard" label="Forms" to="/forms" />
    <NavItem icon="menu" label="More" to="/menu" />
  </nav>
);
```

### Navigation Specifications
```css
.bottom-nav {
  position: fixed;
  bottom: 0;
  width: 100%;
  height: 64px;
  background: white;
  border-top: 1px solid var(--neutral-300);
  display: flex;
  justify-content: space-around;
  align-items: center;
  z-index: 1000;
}

.nav-item {
  flex: 1;
  height: 100%;
  min-width: 48px;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  text-decoration: none;
  color: var(--neutral-700);
}

.nav-item.active {
  color: var(--primary-blue);
}
```

## Form Design Patterns

### Multi-Step Form Layout
```javascript
const MultiStepForm = ({ steps }) => {
  const [currentStep, setCurrentStep] = useState(0);
  
  return (
    <div className="multi-step-form">
      <div className="progress-header">
        <ProgressBar current={currentStep + 1} total={steps.length} />
        <h2>{steps[currentStep].title}</h2>
      </div>
      
      <div className="form-content">
        {steps[currentStep].component}
      </div>
      
      <div className="form-actions">
        {currentStep > 0 && (
          <Button variant="secondary" onClick={handlePrevious}>
            Previous
          </Button>
        )}
        <Button variant="primary" onClick={handleNext}>
          {currentStep < steps.length - 1 ? 'Next' : 'Submit'}
        </Button>
      </div>
    </div>
  );
};
```

### Progressive Disclosure
```javascript
const ConditionalField = ({ condition, children }) => (
  <AnimatePresence>
    {condition && (
      <motion.div
        initial={{ opacity: 0, height: 0 }}
        animate={{ opacity: 1, height: 'auto' }}
        exit={{ opacity: 0, height: 0 }}
        transition={{ duration: 0.3 }}
      >
        {children}
      </motion.div>
    )}
  </AnimatePresence>
);
```

## Offline State Indicators

### Visual Feedback System
```css
.offline-banner {
  position: fixed;
  top: 0;
  width: 100%;
  background: var(--warning-yellow);
  color: var(--neutral-900);
  padding: 8px;
  text-align: center;
  z-index: 9999;
}

.sync-status-indicator {
  display: flex;
  align-items: center;
  gap: 8px;
  padding: 4px 8px;
  border-radius: 4px;
}

.sync-status-indicator.online {
  background: var(--success-green);
  color: white;
}

.sync-status-indicator.offline {
  background: var(--warning-yellow);
  color: var(--neutral-900);
}

.sync-status-indicator.syncing {
  background: var(--info-blue);
  color: white;
}
```

### Queue Management UI
```javascript
const SyncQueue = ({ queuedItems }) => (
  <div className="sync-queue">
    <h3>Sync Queue ({queuedItems.length})</h3>
    {queuedItems.map(item => (
      <div key={item.id} className="queued-item">
        <Icon name={getIconForAction(item.action)} />
        <span>{item.description}</span>
        <StatusBadge status={item.status} />
        {item.status === 'failed' && (
          <Button size="sm" onClick={() => retryItem(item.id)}>
            Retry
          </Button>
        )}
      </div>
    ))}
  </div>
);
```

## Responsive Design Implementation

### Breakpoint System
```css
/* Mobile-first breakpoints */
--breakpoint-sm: 640px;   /* Small tablets */
--breakpoint-md: 768px;   /* Tablets */
--breakpoint-lg: 1024px;  /* Desktop */
--breakpoint-xl: 1280px;  /* Large desktop */

/* Responsive utilities */
.mobile-only { display: block; }
.tablet-up { display: none; }

@media (min-width: 768px) {
  .mobile-only { display: none; }
  .tablet-up { display: block; }
}
```

### Flexible Grid System
```css
.grid {
  display: grid;
  gap: 16px;
  grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
}

@media (min-width: 768px) {
  .grid-md-2 { grid-template-columns: repeat(2, 1fr); }
  .grid-md-3 { grid-template-columns: repeat(3, 1fr); }
}
```

## Error Handling UI Patterns

### Inline Validation
```javascript
const FormField = ({ name, validation, ...props }) => {
  const [error, setError] = useState(null);
  
  return (
    <div className={`form-field ${error ? 'has-error' : ''}`}>
      <label htmlFor={name}>{props.label}</label>
      <input
        id={name}
        onChange={(e) => validateField(e.target.value)}
        aria-invalid={!!error}
        aria-describedby={error ? `${name}-error` : undefined}
        {...props}
      />
      {error && (
        <div id={`${name}-error`} className="error-message" role="alert">
          <Icon name="alert-circle" />
          <span>{error}</span>
        </div>
      )}
    </div>
  );
};
```

### Error Summary Component
```javascript
const ErrorSummary = ({ errors }) => {
  if (errors.length === 0) return null;
  
  return (
    <Alert variant="danger" role="alert">
      <AlertTitle>Please correct the following errors:</AlertTitle>
      <ul>
        {errors.map(error => (
          <li key={error.field}>
            <a href={`#${error.field}`}>{error.message}</a>
          </li>
        ))}
      </ul>
    </Alert>
  );
};
```

## Accessibility Requirements

### WCAG 2.1 AA Compliance
- All interactive elements keyboard navigable
- Color not sole means of conveying information
- 4.5:1 minimum contrast ratio (7:1 for outdoor use)
- Proper ARIA labels and roles
- Focus indicators visible and high contrast

### Construction-Specific Accessibility
```html
<!-- Voice control support with clear labels -->
<button id="take-photo" aria-label="Take photo of safety equipment">
  <Icon name="camera" aria-hidden="true" />
  <span>Take Photo</span>
</button>

<!-- Screen reader announcements for dynamic content -->
<div aria-live="polite" aria-atomic="true" id="sync-status">
  <span>5 items synced successfully</span>
</div>

<!-- Touch target guidelines -->
<style>
.touch-target {
  min-width: 44px;  /* iOS minimum */
  min-height: 48px; /* Android minimum */
  padding: 8px;     /* Additional touch area */
}
</style>
```

## Animation and Interaction Patterns

### Micro-interactions
```css
/* Button feedback */
.button:active {
  transform: scale(0.98);
  transition: transform 0.1s ease;
}

/* Loading states */
@keyframes pulse {
  0%, 100% { opacity: 1; }
  50% { opacity: 0.5; }
}

.loading { animation: pulse 1.5s infinite; }

/* Page transitions */
.page-enter {
  opacity: 0;
  transform: translateX(100%);
}

.page-enter-active {
  opacity: 1;
  transform: translateX(0);
  transition: all 0.3s ease;
}
```

## Performance Standards

### Loading Performance
- **First Contentful Paint**: <1.8s target, 2.5s maximum
- **Time to Interactive**: <3.5s target, 5.0s maximum
- **Image Loading**: Progressive JPEG with lazy loading
- **Component Loading**: Code splitting by route

### Interaction Performance
- **Touch Response**: <100ms acknowledgment
- **Animation Frame Rate**: 60fps minimum
- **Scroll Performance**: Hardware acceleration enabled
- **Memory Usage**: <100MB for core app functionality

## Component Usage Guidelines

### When to Use Each Component
- **Button**: Primary actions, form submission
- **IconButton**: Space-constrained actions, toolbars
- **Card**: Content grouping, list items
- **Modal**: Confirmation dialogs, detailed views
- **Sheet**: Mobile bottom sheets, context menus
- **Toast**: Success/error notifications
- **Alert**: Important static messages

### Form Component Patterns
- **TextInput**: Single-line text (names, numbers)
- **Textarea**: Multi-line text (notes, descriptions)
- **Select**: Choice from predefined options
- **Checkbox**: Multiple selections
- **Radio**: Single selection from group
- **DatePicker**: Date selection with validation
- **NumberInput**: Numeric values with increment/decrement

## Icon Usage Standards

Using Lucide React (24x24 grid):
```javascript
// Standard icon mapping
const iconMap = {
  home: 'home',
  projects: 'folder',
  forms: 'file-text',
  camera: 'camera',
  success: 'check-circle',
  warning: 'alert-circle',
  error: 'x-circle',
  offline: 'wifi-off',
  syncing: 'refresh-cw',
  menu: 'menu'
};

// Consistent sizing
<Icon name="home" size={24} />
```

## Mobile-Specific Patterns

### Thumb Zone Optimization
```
Device Layout Zones:
┌─────────────────┐
│                 │ Neutral zone (hard reach)
│    Neutral      │
│                 │
├─────────────────┤
│                 │ Natural zone (comfortable)
│    Natural      │ Place primary actions here
│   (Primary      │
│    Actions)     │
│                 │
├─────────────────┤
│    Easy         │ Easy zone (thumb rest)
│   (Bottom       │ Navigation and secondary actions
│    Nav)         │
└─────────────────┘
```

### Touch Gesture Implementation
```javascript
// Swipe gestures with Framer Motion
const SwipeableCard = ({ onSwipeLeft, onSwipeRight, children }) => (
  <motion.div
    drag="x"
    dragConstraints={{ left: -100, right: 100 }}
    onDragEnd={(event, info) => {
      if (info.offset.x > 50) onSwipeRight?.();
      if (info.offset.x < -50) onSwipeLeft?.();
    }}
  >
    {children}
  </motion.div>
);
```

## Form Validation UI

### Real-time Validation
```javascript
const ValidatedInput = ({ name, rules, ...props }) => {
  const { register, formState: { errors } } = useFormContext();
  const error = errors[name];
  
  return (
    <div className="validated-input">
      <input
        {...register(name, rules)}
        className={error ? 'input-error' : 'input-valid'}
        aria-invalid={!!error}
        {...props}
      />
      {error && (
        <span className="error-text" role="alert">
          {error.message}
        </span>
      )}
    </div>
  );
};
```

### Success States
```javascript
const SuccessState = ({ message }) => (
  <div className="success-state">
    <Icon name="check-circle" className="success-icon" />
    <h3>Success!</h3>
    <p>{message}</p>
  </div>
);
```

## Photo Management UI

### Camera Interface
```javascript
const CameraCapture = ({ onCapture }) => (
  <div className="camera-interface">
    <div className="camera-viewfinder">
      <div className="grid-overlay" />
      <div className="focus-indicator" />
    </div>
    <div className="camera-controls">
      <Button 
        variant="primary" 
        size="lg" 
        onClick={onCapture}
        aria-label="Capture photo"
      >
        <Icon name="camera" size={32} />
      </Button>
    </div>
    <div className="camera-info">
      <span>GPS: {coordinates}</span>
      <span>Time: {timestamp}</span>
    </div>
  </div>
);
```

### Photo Gallery
```javascript
const PhotoGallery = ({ photos }) => (
  <div className="photo-grid">
    {photos.map(photo => (
      <div key={photo.id} className="photo-thumbnail">
        <img 
          src={photo.thumbnailUrl} 
          alt={photo.description}
          loading="lazy"
          onClick={() => openFullscreen(photo)}
        />
        <div className="photo-metadata">
          <span>{formatDate(photo.capturedAt)}</span>
          <span>{photo.location}</span>
        </div>
      </div>
    ))}
  </div>
);
```

## Offline Experience Design

### Status Indicators
```javascript
const OfflineIndicator = ({ isOnline, syncStatus, queueCount }) => (
  <div className={`sync-indicator ${isOnline ? 'online' : 'offline'}`}>
    <Icon name={isOnline ? 'wifi' : 'wifi-off'} />
    <span>
      {isOnline ? 'Online' : 'Offline'}
      {queueCount > 0 && ` (${queueCount} pending)`}
    </span>
    {syncStatus === 'syncing' && <Spinner size="sm" />}
  </div>
);
```

### Conflict Resolution UI
```javascript
const ConflictResolver = ({ conflicts }) => (
  <Modal title="Sync Conflicts">
    {conflicts.map(conflict => (
      <div key={conflict.id} className="conflict-item">
        <h4>{conflict.fieldName}</h4>
        <div className="conflict-options">
          <div className="option local">
            <h5>Your Version</h5>
            <p>{conflict.localValue}</p>
            <Button onClick={() => resolveConflict(conflict.id, 'local')}>
              Keep Mine
            </Button>
          </div>
          <div className="option remote">
            <h5>Server Version</h5>
            <p>{conflict.remoteValue}</p>
            <Button onClick={() => resolveConflict(conflict.id, 'remote')}>
              Keep Theirs
            </Button>
          </div>
        </div>
      </div>
    ))}
  </Modal>
);
```

## Performance Optimization

### Image Optimization
```javascript
const OptimizedImage = ({ src, alt, sizes }) => (
  <picture>
    <source 
      type="image/webp" 
      srcSet={generateSrcSet(src, 'webp')}
    />
    <img
      src={`${src}?w=400`}
      srcSet={generateSrcSet(src, 'jpeg')}
      sizes={sizes || '100vw'}
      alt={alt}
      loading="lazy"
    />
  </picture>
);
```

### Lazy Loading Lists
```javascript
const LazyList = ({ items, renderItem, loadMore }) => {
  const [visibleItems, setVisibleItems] = useState(20);
  const observerRef = useRef();
  
  useIntersectionObserver(observerRef, {
    onIntersect: () => {
      if (visibleItems < items.length) {
        setVisibleItems(prev => prev + 20);
      }
    }
  });
  
  return (
    <>
      {items.slice(0, visibleItems).map(renderItem)}
      <div ref={observerRef} />
    </>
  );
};
```

## Component Testing Standards

### Accessibility Testing
```javascript
describe('Button Accessibility', () => {
  it('should meet minimum touch target size', () => {
    const { getByRole } = render(<Button>Click me</Button>);
    const button = getByRole('button');
    expect(button).toHaveStyle('min-height: 48px');
  });
  
  it('should be keyboard accessible', () => {
    const handleClick = jest.fn();
    const { getByRole } = render(<Button onClick={handleClick}>Submit</Button>);
    fireEvent.keyDown(getByRole('button'), { key: 'Enter' });
    expect(handleClick).toHaveBeenCalled();
  });
});
```

### Visual Regression Testing
```javascript
describe('Component Visual Tests', () => {
  it('should match design specifications', async () => {
    const component = render(<FormCard />);
    const image = await takeScreenshot(component);
    expect(image).toMatchImageSnapshot();
  });
});
```

Remember: All UI components must prioritize field usability over visual sophistication. When in doubt, choose the more robust, accessible option that works better with gloves and in bright sunlight.